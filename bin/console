#!/usr/bin/env php
<?php

set_time_limit(0);

include_once(__DIR__."/../includes/core/class.filesystem.php");
include_once(__DIR__."/../includes/core/functions.core.php");



$console = new Console();
if (in_array($argv[1], array('--help', '-help', '-h', '-?'))) {
	$console->getHelp($argv[0]);
} else {
	if (isset($argv[1])):
		switch ($argv[1]) {
			case "createmodule":
				echo "Module name: ";
				$moduleName = trim(fgets(STDIN));
				$result = createModuleStructure( $moduleName );
				echo $result;
				break;
			case "showmodules":
				showModules();
				break;
			case "findpage":
				echo "Page to find: ";
				$pagename = trim(fgets(STDIN));			
				findPage($pagename);
				break;				
			default:
				echo "\033[31mWhat do you mean?\033[37m";
		}
	else:
		echo "\033[31mWhat do you want to do?, parameters needed.\033[37m";
	endif;
	echo "\n";
}


function showModules(){	
	$folders = FileSystem::showDirFolders(__DIR__."/../includes/modules/");
	echo "\n";
	foreach($folders as $folder):
		if ($folder <>"core"){
			$annotations = FileSystem::getClassAnnotations($folder);
			$annotation = $annotations[1];
			$ann = isset($annotation[0]) ? $annotation[0] : "";
			echo str_pad($folder, 30, ' ', STR_PAD_RIGHT).$ann."\n";		
		}
	endforeach;
}

function findPage($pagename){	
	$folders = FileSystem::showDirFolders(__DIR__."/../includes/modules/");
	echo "\n";
	$exists = 0;
	foreach($folders as $folder):
		//echo __DIR__."/../includes/modules/".$folder."/pages/".$pagename.".php\n";
		if (file_exists(__DIR__."/../includes/modules/".$folder."/pages/".$pagename.".php")){
			$exists ++;
			echo "Find it!! --> module: ".$folder." (includes/modules/".$folder."/pages/".$pagename.".php)\n";
		}
	endforeach;

	if ($exists == 0){
		echo "Page not found\n";
	}
	elseif ($exists > 1){
		echo "\n";
		$txtalert = "\nMore than one file matched. This is a problem!!!, one page will be overrided by the other.\n";
		$console = new console();
		echo $console->getColoredString($txtalert, "white", "red");
		echo "\n";
	}
}

function createModuleStructure($moduleName){
	$modulePath = "includes/modules/".$moduleName;
	if ( !file_exists( $modulePath ) and !is_dir( $modulePath ) ):
		mkdir ( $modulePath, 0700 );
		mkdir ( $modulePath."/controllers", 0700 );
		mkdir ( $modulePath."/pages", 0700 );
		mkdir ( $modulePath."/templates", 0700 );
		mkdir ( $modulePath."/resources", 0700 );
		mkdir ( $modulePath."/resources/js", 0700 );
		mkdir ( $modulePath."/resources/images", 0700 );

		FileSystem::createFile( $modulePath."/class.".$moduleName.".php", fileClassContent( $moduleName ) );
		FileSystem::createFile( $modulePath."/controllers/controller.default.php", fileControllerContent( $moduleName ) );
		return "\033[32mModule ".$moduleName." created\033[37m";
	else:
		return "\033[31mError while creating module structure\033[37m";
	endif;
}


function fileClassContent( $moduleName ){
	$content = "<?php
/**
* @Manage ".$moduleName."
* @author [author] <[email]>
* @version 1.0
*
*/
class ".$moduleName."{

	/**
	 * Devuelve array con los registros
	 * @param  string 	\$filter 	Filtro SQL
	 * @return array 				Array con registros
	 */
	public function get".ucfirst($moduleName)."(\$filter = \"\"){
		\$Sql=\"SELECT * FROM ".$moduleName." WHERE 1=1 \".\$filter;
		return connection::getSQL(\$Sql);
	}   

	/**
	 * Inserta registro en ".$moduleName."
	 * @return boolean 				Resultado de la SQL
	 */
	public function insert".ucfirst($moduleName)."( ){		
		\$Sql=\"INSERT INTO ".$moduleName." ( ) 
			  VALUES ()\";
		return connection::execute_query(\$Sql);
	}

	/**
	 * Elimina registro en ".$moduleName."
	 * @param  int 		\$id 		Id registro a eliminar
	 * @return boolean 				Resultado de la SQL
	 */
	public function delete".ucfirst($moduleName)."(\$id){
		\$Sql=\"DELETE FROM ".$moduleName." WHERE id_".$moduleName."=\".\$id;
		return connection::execute_query(\$Sql);
	}

	/**
	 * Actualiza registro en ".$moduleName."
	 * @param  int 		\$id 		Id registro a eliminar
	 * @param  string	\$value 		Nuevo valor
	 * @return boolean 				Resultado de la SQL
	 */
	public function update".ucfirst($moduleName)."(\$id,\$value){
		\$Sql=\"UPDATE ".$moduleName." SET
			 field='\".\$value.\"',
			 WHERE id_".$moduleName."=\".\$id;
		return connection::execute_query(\$Sql);
	}
}
?>";
	return $content;
}

function fileControllerContent( $moduleName ){
	$content = "<?php
class ".$moduleName."Controller{
	public static function createAction(){
		
	}

	public static function updateAction(){
	
	}
}
?>";
	return $content;
}


/** 
* Class console
*
* @param  foo bar
* @return baz
*/
class Console {
	private $foreground_colors = array();
	private $background_colors = array();

	public function __construct() {
		// Set up shell colors
		$this->foreground_colors['black'] = '0;30';
		$this->foreground_colors['dark_gray'] = '1;30';
		$this->foreground_colors['blue'] = '0;34';
		$this->foreground_colors['light_blue'] = '1;34';
		$this->foreground_colors['green'] = '0;32';
		$this->foreground_colors['light_green'] = '1;32';
		$this->foreground_colors['cyan'] = '0;36';
		$this->foreground_colors['light_cyan'] = '1;36';
		$this->foreground_colors['red'] = '0;31';
		$this->foreground_colors['light_red'] = '1;31';
		$this->foreground_colors['purple'] = '0;35';
		$this->foreground_colors['light_purple'] = '1;35';
		$this->foreground_colors['brown'] = '0;33';
		$this->foreground_colors['yellow'] = '1;33';
		$this->foreground_colors['light_gray'] = '0;37';
		$this->foreground_colors['white'] = '1;37';

		$this->background_colors['black'] = '40';
		$this->background_colors['red'] = '41';
		$this->background_colors['green'] = '42';
		$this->background_colors['yellow'] = '43';
		$this->background_colors['blue'] = '44';
		$this->background_colors['magenta'] = '45';
		$this->background_colors['cyan'] = '46';
		$this->background_colors['light_gray'] = '47';
	}	

	public function getHelp($param){
		echo "\n";
		echo $this->getColoredString("\n  Usage:\n  php ".$param." <param>\n", "white", "green");
	?>


--help, -help, -h		Show this help
createmodule			Create module with complete folder structure
showmodules			Show all modules
findpage			Find page by name

<?php	
	}

	// Returns colored string
	public function getColoredString($string, $foreground_color = null, $background_color = null) {
		$colored_string = "";

		// Check if given foreground color found
		if (isset($this->foreground_colors[$foreground_color])) {
			$colored_string .= "\033[" . $this->foreground_colors[$foreground_color] . "m";
		}
		// Check if given background color found
		if (isset($this->background_colors[$background_color])) {
			$colored_string .= "\033[" . $this->background_colors[$background_color] . "m";
		}

		// Add string and end coloring
		$colored_string .=  $string . "\033[0m";

		return $colored_string;
	}

	// Returns all foreground color names
	public function getForegroundColors() {
		return array_keys($this->foreground_colors);
	}

	// Returns all background color names
	public function getBackgroundColors() {
		return array_keys($this->background_colors);
	}
}